name: Deploy To EC2

on:
  push:
    branches:
      - main
      - dev
  pull_request:  # fork된 PR은 Secrets 접근 불가로 자동으로 실행 안됨
    branches:
      - main
      - dev

jobs:
  test:
    if: github.ref == 'refs/heads/dev' || github.base_ref == 'dev'  # dev 브랜치 관련 작업
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Run Tests
        run: ./gradlew test

  deploy-to-production:
    if: github.ref == 'refs/heads/main'  # main 브랜치 관련 작업만
    runs-on: ubuntu-latest
    steps:
      - name: Debug information
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.base_ref: ${{ github.base_ref }}"
          echo "github.head_ref: ${{ github.head_ref }}"
          echo "github.event_name: ${{ github.event_name }}"
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: APPLICATION_YML
          script: |
            echo "===== 배포 시작 ====="
            
            echo "0. 작업 디렉토리 확인 및 정리"
            if [ -d "/home/ubuntu/backend/backend" ]; then
              cd /home/ubuntu
              rm -rf backend
              git clone https://github.com/undefinedus/backend.git
            fi
            
            echo "1. 작업 디렉토리로 이동"
            cd /home/ubuntu/backend
            pwd
            
            echo "2. 실행 중인 애플리케이션 종료"
            sudo fuser -k -n tcp 8080 || true
            
            echo "3. Git 변경사항 초기화"
            git reset --hard HEAD
            
            echo "4. main 브랜치로 전환"
            git checkout main
            
            echo "5. 최신 코드 가져오기"
            git pull origin main
            
            echo "6. application.yml 설정"
            mkdir -p src/main/resources
            echo "$APPLICATION_YML" > src/main/resources/application.yml
            echo "application.yml 생성 완료"
            
            echo "7. Gradle 권한 설정 및 빌드 시작"
            chmod +x ./gradlew
            export GRADLE_OPTS="-Xmx512m -XX:MaxMetaspaceSize=256m"
            
            # Gradle 빌드 전에 추가
            echo "현재 build/libs 디렉토리 내용:"
            ls -la build/libs || echo "디렉토리가 없음"
            
            # main 브랜치는 테스트 없이 빌드만 실행
            if ! timeout 600s ./gradlew clean bootJar --rerun-tasks --info; then
              echo "Gradle 빌드 실패"
              exit 1
            fi
            
            # Gradle 빌드 후에 추가
            echo "빌드 후 build/libs 디렉토리 내용:"
            ls -la build/libs
            
            echo "Gradle 빌드 성공"
            
            # 애플리케이션 실행 부분에도 메모리 설정 추가
            echo "8. 애플리케이션 실행"
            nohup java -Xmx512m -jar $(ls build/libs/*.jar | grep -v plain) > ./output.log 2>&1 &
            
            echo "9. 배포 상태 확인 중... (60초 대기)"
            sleep 60
            
            if ps aux | grep "build/libs/.*.jar" > /dev/null && ss -tunlp | grep 8080 > /dev/null; then
              echo "===== 배포 성공 ====="
              echo "애플리케이션 로그:"
              tail -n 50 ./output.log
            else
              echo "===== 배포 실패 ====="
              echo "애플리케이션 로그:"
              cat ./output.log
              echo "Java 프로세스 상태:"
              ps -ef | grep java
              echo "포트 상태:"
              ss -tunlp | grep 8080 || echo "8080 포트 사용 중이 아님"
              exit 1
            fi
            
            echo "현재 실행중인 Java 프로세스:"
            ps -ef | grep java

            echo "8080 포트 사용 현황:"
            ss -tunlp | grep 8080 || true