name: Deploy To EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: SSH(원격접속)로 EC2에 접속하여 자동 배포하기
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: APPLICATION_YML
          script: |
            echo "===== 배포 시작 ====="
            
            echo "0. 작업 디렉토리 확인 및 정리"
            if [ -d "/home/ubuntu/backend/backend" ]; then
              cd /home/ubuntu
              rm -rf backend
              git clone https://github.com/undefinedus/backend.git
            fi
            
            echo "1. 작업 디렉토리로 이동"
            cd /home/ubuntu/backend
            pwd
            
            echo "2. 실행 중인 애플리케이션 종료"
            sudo fuser -k -n tcp 8080 || true
            
            echo "3. Git 변경사항 초기화"
            git reset --hard HEAD
            
            echo "4. main 브랜치로 전환"
            git checkout main
            
            echo "5. 최신 코드 가져오기"
            git pull origin main
            
            echo "6. application.yml 설정"
            mkdir -p src/main/resources
            echo "$APPLICATION_YML" > src/main/resources/application.yml
            echo "application.yml 생성 완료"
            
            echo "7. Gradle 권한 설정 및 빌드 시작"
            chmod +x ./gradlew
            export GRADLE_OPTS="-Xmx512m -XX:MaxMetaspaceSize=256m"
            
            # 빌드 시도 및 실패 시 로그 출력
            if ! timeout 600s ./gradlew clean build --info; then
              echo "Gradle 빌드 실패"
              echo "테스트 리포트:"
              cat ./build/reports/tests/test/index.html 2>/dev/null || true
              echo "빌드 로그:"
              cat ./build/reports/tests/test/test/classes/*.html 2>/dev/null || true
              exit 1
            fi
            
            echo "Gradle 빌드 성공"
            
            # 애플리케이션 실행 부분에도 메모리 설정 추가
            echo "8. 애플리케이션 실행"
            nohup java -Xmx512m -jar build/libs/*SNAPSHOT.jar > ./output.log 2>&1 &
            
            echo "9. 배포 상태 확인 중... (10초 대기)"
            sleep 10
            
            if ps aux | grep "[S]NAPSHOT.jar" > /dev/null; then
              echo "===== 배포 성공 ====="
              echo "애플리케이션 로그:"
              tail -n 50 ./output.log
            else
              echo "===== 배포 실패 ====="
              echo "애플리케이션 로그:"
              cat ./output.log
              exit 1
            fi
            
            echo "현재 실행중인 Java 프로세스:"
            ps -ef | grep java

            echo "8080 포트 사용 현황:"
            netstat -tnlp | grep 8080 || true